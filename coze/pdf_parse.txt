{"type":"coze-workflow-clipboard-data","source":{"workflowId":"7526209783650041906","flowMode":0,"spaceId":"7461798853910724634","isDouyin":false,"host":"www.coze.cn"},"json":{"nodes":[{"id":"162879","type":"5","meta":{"position":{"x":-125.81151910546589,"y":-11.339926330274409}},"data":{"nodeMeta":{"description":"编写代码，处理输入变量来生成返回值","icon":"https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Code-v2.jpg","mainColor":"#00B2B2","subTitle":"代码","title":"URL校验代码"},"inputs":{"inputParameters":[{"name":"pdf_url","input":{"type":"string","value":{"type":"ref","content":{"source":"block-output","blockID":"100001","name":"origial_pdf_url"},"rawMeta":{"type":1}}}}],"code":"import re\nfrom typing import Dict, Any\nfrom urllib.parse import urlparse\n\nasync def main(args: Args) -> Output:\n    params = args.params\n    pdf_url = params.get('pdf_url', '')\n    \n    def validate_pdf_url(url: str) -> Dict[str, Any]:\n        # 基本检查\n        if not url or not url.strip():\n            return {\"is_valid\": False, \"error_message\": \"URL不能为空\", \"error_code\": \"EMPTY_URL\"}\n        \n        # 检查是否以http或https开头\n        if not (url.startswith('http://') or url.startswith('https://')):\n            return {\"is_valid\": False, \"error_message\": \"URL必须以http://或https://开头\", \"error_code\": \"INVALID_PROTOCOL\"}\n        \n        # 检查是否以.pdf结尾\n        if not url.lower().endswith('.pdf'):\n            return {\"is_valid\": False, \"error_message\": \"URL必须以.pdf结尾\", \"error_code\": \"NOT_PDF_FILE\"}\n        \n        # 尝试解析URL\n        try:\n            parsed = urlparse(url)\n            if not parsed.netloc:\n                return {\"is_valid\": False, \"error_message\": \"URL缺少域名\", \"error_code\": \"NO_DOMAIN\"}\n        except:\n            return {\"is_valid\": False, \"error_message\": \"URL格式错误\", \"error_code\": \"PARSE_ERROR\"}\n        \n        return {\"is_valid\": True, \"error_message\": \"\", \"error_code\": \"\"}\n    \n    validation_result = validate_pdf_url(pdf_url)\n    \n    ret: Output = {\n        \"is_valid\": validation_result[\"is_valid\"],\n        \"validated_url\": pdf_url if validation_result[\"is_valid\"] else \"\",\n        \"error_info\": {\n            \"has_error\": not validation_result[\"is_valid\"],\n            \"error_message\": validation_result[\"error_message\"],\n            \"error_code\": validation_result[\"error_code\"]\n        },\n        \"url_info\": {\n            \"original_url\": pdf_url,\n            \"url_length\": len(pdf_url),\n            \"is_https\": pdf_url.startswith('https://') if pdf_url else False\n        }\n    }\n    \n    return ret","language":3,"settingOnError":{"processType":1,"timeoutMs":60000,"retryTimes":0}},"outputs":[{"type":"boolean","name":"is_valid"},{"type":"string","name":"validated_url"},{"type":"object","name":"error_info","schema":[{"type":"string","name":"has_error"},{"type":"string","name":"error_message"},{"type":"string","name":"error_code"}]},{"type":"object","name":"url_info","schema":[{"type":"string","name":"original_url"},{"type":"string","name":"url_length"},{"type":"string","name":"is_https"}]}]},"_temp":{"bounds":{"x":-305.8115191054659,"y":-11.339926330274409,"width":360,"height":112},"externalData":{"icon":"https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Code-v2.jpg","description":"编写代码，处理输入变量来生成返回值","title":"代码","mainColor":"#00B2B2"}}},{"id":"141031","type":"5","meta":{"position":{"x":2003.5808047495632,"y":-23.33992633027441}},"data":{"nodeMeta":{"description":"编写代码，处理输入变量来生成返回值","icon":"https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Code-v2.jpg","mainColor":"#00B2B2","subTitle":"代码","title":"结果格式化代码"},"inputs":{"inputParameters":[{"name":"raw_content","input":{"type":"string","value":{"type":"ref","content":{"source":"block-output","blockID":"137225","name":"output"},"rawMeta":{"type":1}}}}],"code":"import json\nimport re\nfrom datetime import datetime\nfrom typing import Dict, Any, List\n\nasync def main(args: Args) -> Output:\n    params = args.params\n    \n    # 获取输入参数 - 现在只需要一个大字符串\n    raw_content = params.get('raw_content', '')\n    \n    def clean_and_format_text(text: str) -> str:\n        \"\"\"清理和格式化混乱的PDF文本\"\"\"\n        if not text:\n            return \"\"\n        \n        # 移除多余的换行符和空格\n        text = re.sub(r'\\n+', ' ', text)\n        text = re.sub(r'\\s+', ' ', text)\n        \n        # 处理中文字符间的空格问题\n        text = re.sub(r'(?<=[\\u4e00-\\u9fff])\\s+(?=[\\u4e00-\\u9fff])', '', text)\n        \n        # 处理英文单词被分割的问题\n        text = re.sub(r'(?<=[a-zA-Z])\\s+(?=[a-zA-Z])', '', text)\n        \n        # 处理数字和符号\n        text = re.sub(r'(?<=\\d)\\s+(?=\\d)', '', text)\n        text = re.sub(r'(?<=[.,;:!?])\\s+(?=[\\u4e00-\\u9fff])', ' ', text)\n        \n        # 处理特殊符号\n        text = re.sub(r'\\s*\\(\\s*', '(', text)\n        text = re.sub(r'\\s*\\)\\s*', ')', text)\n        text = re.sub(r'\\s*\\[\\s*', '[', text)\n        text = re.sub(r'\\s*\\]\\s*', ']', text)\n        \n        # 处理标点符号\n        text = re.sub(r'\\s*[。，；：！？]\\s*', lambda m: m.group().strip() + ' ', text)\n        \n        return text.strip()\n    \n    def extract_key_sections(text: str) -> Dict[str, str]:\n        \"\"\"提取关键章节\"\"\"\n        sections = {}\n        \n        # 查找标题模式\n        title_patterns = [\n            r'(摘要|Abstract)[\\s\\S]*?(?=关键词|Key\\s*words|１|1\\s*引言|Introduction)',\n            r'(关键词|Key\\s*words)[：:\\s]*([^\\n]*)',\n            r'(引言|Introduction)[\\s\\S]*?(?=２|2\\s*|方法|Method)',\n            r'(结论|Conclusion|结束语)[\\s\\S]*?(?=参考文献|References|$)',\n        ]\n        \n        for pattern in title_patterns:\n            match = re.search(pattern, text, re.IGNORECASE)\n            if match:\n                section_name = match.group(1)\n                section_content = match.group(0) if len(match.groups()) == 1 else match.group(2)\n                sections[section_name] = clean_and_format_text(section_content)\n        \n        return sections\n    \n    def generate_summary(text: str) -> str:\n        \"\"\"生成文档摘要\"\"\"\n        # 寻找摘要部分\n        abstract_match = re.search(r'摘要[\\s\\S]*?(?=关键词|Key)', text)\n        if abstract_match:\n            return clean_and_format_text(abstract_match.group(0))\n        \n        # 如果没有找到摘要，取前1000个字符\n        cleaned_text = clean_and_format_text(text)\n        return cleaned_text[:1000] + \"...\" if len(cleaned_text) > 1000 else cleaned_text\n    \n    def extract_key_points(text: str) -> List[str]:\n        \"\"\"提取关键点\"\"\"\n        key_points = []\n        \n        # 查找关键词\n        keywords_match = re.search(r'关键词[：:\\s]*([^\\n]*)', text)\n        if keywords_match:\n            keywords = keywords_match.group(1).split('；')\n            key_points.extend([kw.strip() for kw in keywords if kw.strip()])\n        \n        # 查找编号列表\n        numbered_items = re.findall(r'[１-９1-9]\\s*[）)]\\s*([^１-９1-9）)]*?)(?=[１-９1-9]\\s*[）)]|$)', text)\n        for item in numbered_items[:5]:  # 最多5个\n            cleaned_item = clean_and_format_text(item)\n            if len(cleaned_item) > 10 and len(cleaned_item) < 200:\n                key_points.append(cleaned_item)\n        \n        return key_points[:10]  # 最多返回10个关键点\n    \n    def detect_document_type(text: str) -> str:\n        \"\"\"检测文档类型\"\"\"\n        if re.search(r'摘要|Abstract|关键词|Key\\s*words', text):\n            return \"学术论文\"\n        elif re.search(r'第[一二三四五六七八九十]章|Chapter', text):\n            return \"书籍/报告\"\n        elif re.search(r'条款|协议|合同', text):\n            return \"法律文档\"\n        else:\n            return \"普通文档\"\n    \n    def create_structured_content(text: str) -> Dict[str, Any]:\n        \"\"\"创建结构化内容\"\"\"\n        cleaned_text = clean_and_format_text(text)\n        sections = extract_key_sections(cleaned_text)\n        \n        return {\n            \"original_length\": len(text),\n            \"cleaned_length\": len(cleaned_text),\n            \"document_type\": detect_document_type(text),\n            \"sections\": sections,\n            \"full_content\": cleaned_text\n        }\n    \n    # 处理原始内容\n    if not raw_content:\n        return {\n            \"formatted_content\": {\n                \"full_text\": \"\",\n                \"summary\": \"未提供内容\",\n                \"key_points\": []\n            },\n            \"document_structure\": {\n                \"document_type\": \"未知\",\n                \"sections\": {},\n                \"statistics\": {\"original_length\": 0, \"cleaned_length\": 0}\n            },\n            \"processing_report\": {\n                \"processed_at\": datetime.now().isoformat(),\n                \"processing_status\": \"failed\",\n                \"error_message\": \"输入内容为空\"\n            },\n            \"export_formats\": {\n                \"json\": \"{}\",\n                \"markdown\": \"# 处理失败\\n\\n未提供有效内容\",\n                \"plain_text\": \"\"\n            }\n        }\n    \n    # 创建结构化内容\n    structured_content = create_structured_content(raw_content)\n    \n    # 生成摘要和关键点\n    summary = generate_summary(raw_content)\n    key_points = extract_key_points(raw_content)\n    \n    # 生成统计信息\n    stats = {\n        \"original_length\": structured_content[\"original_length\"],\n        \"cleaned_length\": structured_content[\"cleaned_length\"],\n        \"compression_ratio\": round(structured_content[\"cleaned_length\"] / structured_content[\"original_length\"] * 100, 2) if structured_content[\"original_length\"] > 0 else 0,\n        \"sections_found\": len(structured_content[\"sections\"]),\n        \"key_points_extracted\": len(key_points)\n    }\n    \n    # 构建最终输出\n    ret: Output = {\n        \"formatted_content\": {\n            \"full_text\": structured_content[\"full_content\"],\n            \"summary\": summary,\n            \"key_points\": key_points\n        },\n        \"document_structure\": {\n            \"document_type\": structured_content[\"document_type\"],\n            \"sections\": structured_content[\"sections\"],\n            \"statistics\": stats\n        }\n    }\n    \n    return ret","language":3,"settingOnError":{"processType":1,"timeoutMs":60000,"retryTimes":0}},"outputs":[{"type":"object","name":"formatted_content","schema":[{"type":"string","name":"full_text"},{"type":"string","name":"summary"},{"type":"string","name":"key_points"}]},{"type":"object","name":"document_structure","schema":[{"type":"string","name":"document_type"},{"type":"string","name":"sections"},{"type":"string","name":"statistics"}]}]},"_temp":{"bounds":{"x":1823.5808047495632,"y":-23.33992633027441,"width":360,"height":112},"externalData":{"icon":"https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Code-v2.jpg","description":"编写代码，处理输入变量来生成返回值","title":"代码","mainColor":"#00B2B2"}}},{"id":"186211","type":"8","meta":{"position":{"x":384.02887364941404,"y":-17.670463165137207}},"data":{"nodeMeta":{"description":"连接多个下游分支，若设定的条件成立则仅运行对应的分支，若均不成立则只运行“否则”分支","icon":"https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Condition-v2.jpg","mainColor":"#00B2B2","subTitle":"选择器","title":"选择器"},"inputs":{"branches":[{"condition":{"logic":2,"conditions":[{"operator":11,"left":{"input":{"type":"boolean","value":{"type":"ref","content":{"source":"block-output","blockID":"162879","name":"is_valid"}}}}}]}}]}},"_temp":{"bounds":{"x":204.02887364941404,"y":-17.670463165137207,"width":360,"height":138},"externalData":{"icon":"https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Condition-v2.jpg","description":"连接多个下游分支，若设定的条件成立则仅运行对应的分支，若均不成立则只运行“否则”分支","title":"选择器","mainColor":"#00B2B2"}}},{"id":"171765","type":"13","meta":{"position":{"x":1244.2226926202388,"y":492.4966512787313}},"data":{"inputs":{"callTransferVoice":true,"chatHistoryWriting":"historyWrite","content":{"type":"string","value":{"type":"literal","content":"传入的pdf url不合法，无法进行文件解析，请重新传入\n\n错误原因如下：\n{{error_info}}"}},"inputParameters":[{"name":"error_info","input":{"type":"object","schema":[{"type":"string","name":"has_error"},{"type":"string","name":"error_message"},{"type":"string","name":"error_code"}],"value":{"type":"ref","content":{"source":"block-output","blockID":"162879","name":"error_info"},"rawMeta":{"type":6}}}}],"streamingOutput":false},"nodeMeta":{"description":"节点从“消息”更名为“输出”，支持中间过程的消息输出，支持流式和非流式两种方式","icon":"https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Output-v2.jpg","mainColor":"#5C62FF","subTitle":"输出","title":"输出"}},"_temp":{"bounds":{"x":1064.2226926202388,"y":492.4966512787313,"width":360,"height":138},"externalData":{"icon":"https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Output-v2.jpg","description":"节点从“消息”更名为“输出”，支持中间过程的消息输出，支持流式和非流式两种方式","title":"输出","mainColor":"#5C62FF"}}},{"id":"134215","type":"32","meta":{"position":{"x":2934.3631235551125,"y":210.32123914369555}},"data":{"inputs":{"mergeGroups":[{"name":"Group1","variables":[{"type":"object","schema":[{"type":"string","name":"full_text"},{"type":"string","name":"summary"},{"type":"string","name":"key_points"}],"value":{"type":"ref","content":{"source":"block-output","blockID":"141031","name":"formatted_content"},"rawMeta":{"type":6}}}]}]},"nodeMeta":{"description":"对多个分支的输出进行聚合处理","icon":"https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/VariableMerge-icon.jpg","mainColor":"#00B2B2","subTitle":"变量聚合","title":"变量聚合"},"outputs":[{"type":"object","name":"Group1","schema":[{"type":"string","name":"full_text"},{"type":"string","name":"summary"},{"type":"string","name":"key_points"}]}]},"_temp":{"bounds":{"x":2754.3631235551125,"y":210.32123914369555,"width":360,"height":114},"externalData":{"icon":"https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/VariableMerge-icon.jpg","description":"对多个分支的输出进行聚合处理","title":"变量聚合","mainColor":"#00B2B2"}}},{"id":"137225","type":"4","meta":{"position":{"x":1298.7716336340477,"y":-23.33992633027441}},"data":{"nodeMeta":{"description":"将在线PDF格式解析成文本","icon":"https://lf3-static.bytednsdoc.com/obj/eden-cn/dvsmryvd_avi_dvsm/ljhwZthlaukjlkulzlp/icon/icon-Plugin-v2.jpg","subtitle":"doc_reader:PDF_reader","title":"PDF_reader"},"inputs":{"apiParam":[{"input":{"type":"string","value":{"content":"7373650116919509028","rawMeta":{"type":1},"type":"literal"}},"name":"apiID"},{"input":{"type":"string","value":{"content":"PDF_reader","rawMeta":{"type":1},"type":"literal"}},"name":"apiName"},{"input":{"type":"string","value":{"content":"7368650371998236708","rawMeta":{"type":1},"type":"literal"}},"name":"pluginID"},{"input":{"type":"string","value":{"content":"doc_reader","rawMeta":{"type":1},"type":"literal"}},"name":"pluginName"},{"input":{"type":"string","value":{"content":"","rawMeta":{"type":1},"type":"literal"}},"name":"pluginVersion"},{"input":{"type":"string","value":{"content":"","rawMeta":{"type":1},"type":"literal"}},"name":"tips"},{"input":{"type":"string","value":{"content":"","rawMeta":{"type":1},"type":"literal"}},"name":"outDocLink"}],"inputParameters":[{"name":"pdfUrl","input":{"type":"string","value":{"type":"ref","content":{"source":"block-output","blockID":"162879","name":"validated_url"},"rawMeta":{"type":1}}}}],"settingOnError":{"processType":1,"timeoutMs":180000,"retryTimes":0}},"outputs":[{"type":"string","name":"output","required":false}]},"_temp":{"bounds":{"x":1118.7716336340477,"y":-23.33992633027441,"width":360,"height":112},"externalData":{"icon":"https://lf26-appstore-sign.oceancloudapi.com/ocean-cloud-tos/plugin_icon/292933043755555_1715647631481358942_nc87W6gnxy.png?lk3s=cd508e2b&x-expires=1754990223&x-signature=QrFCEAAudnNZmKf9m6VjnQlykE0%3D","apiName":"PDF_reader","pluginID":"7368650371998236708","pluginProductStatus":1,"pluginProductUnlistType":0,"pluginType":1,"spaceID":"7360666122846879755","inputs":[{"description":"PDF链接","input":{},"name":"pdfUrl","required":true,"type":"string"}],"outputs":[{"input":{},"name":"output","required":false,"type":"string"}],"updateTime":1752397685,"channel_id":2,"latestVersionTs":"0","latestVersionName":"","versionName":"","description":"将在线PDF格式解析成文本","title":"PDF_reader","mainColor":"#CA61FF"}}}],"edges":[{"sourceNodeID":"162879","targetNodeID":"186211"},{"sourceNodeID":"137225","targetNodeID":"141031"},{"sourceNodeID":"141031","targetNodeID":"134215"},{"sourceNodeID":"186211","targetNodeID":"171765","sourcePortID":"false"},{"sourceNodeID":"186211","targetNodeID":"137225","sourcePortID":"true"},{"sourceNodeID":"171765","targetNodeID":"134215"}]},"bounds":{"x":-305.8115191054659,"y":-23.33992633027441,"width":3420.1746426605782,"height":653.8365776090056}}